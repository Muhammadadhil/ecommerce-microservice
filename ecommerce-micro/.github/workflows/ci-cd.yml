# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build_services:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        service: [services/user-authentication,services/product,services/order,services/notification,apiGateway]
        node-version: [18.x, 20.x, 22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci
      working-directory: ./${{ matrix.service }}

    - name: Build services
      run: npm run build --if-present
      working-directory: ./${{ matrix.service }}

    - name: Run tests 
    - run: npm test --if-present
    working-directory: ./${{ matrix.service }}

  docker_build_and_push:

    runs-on: ubuntu:latest
    needs: build_services

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}  

    - name: Build and push docker images
    run: |
      docker build -t ${{ secrets.DOCKER_USERNAME }}/user-service:latest ./services/user-authentication
      docker build -t ${{ secrets.DOCKER_USERNAME }}/product-service:latest ./services/product
      docker build -t ${{ secrets.DOCKER_USERNAME }}/order-service:latest ./services/order
      docker build -t ${{ secrets.DOCKER_USERNAME }}/notification-service:latest ./services/notification
      docker build -t ${{ secrets.DOCKER_USERNAME }}/ecommerce-apiGateway:latest ./apiGateway
      docker push ${{ secrets.DOCKER_USERNAME }}/user-service:latest
      docker push ${{ secrets.DOCKER_USERNAME }}/product-service:latest
      docker push ${{ secrets.DOCKER_USERNAME }}/order-service:latest
      docker push ${{ secrets.DOCKER_USERNAME }}/notification-service:latest
      docker push ${{ secrets.DOCKER_USERNAME }}/ecommerce-apiGateway:latest 
